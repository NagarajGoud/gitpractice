Migration of Application to Amazon AWS

Current stack : Apache Web Server, Apache Tomcat application server with Active MQ and Oracle and MongoDB backend.

Proposed stack :

1. IAM (Identity and access management): To create and manage AWS users and groups.
2. Cloud Formation: For taking  care of high availability and replication and for creating custom template for mongodb
3. RDS : Amazon RDS is available on several database instance types - optimized for memory, performance or I/O - and provides an Oracle database engine.
   You can also use the AWS Database Migration Service to easily migrate or replicate your existing databases to Amazon RDS.
4. Route 53: Amazon Route 53 is a highly available and scalable cloud Domain Name System (DNS) web service. 
   It is designed to give developers and businesses an extremely reliable and cost effective way to route end users to Internet applications by translating names like www.example.com into the numeric IP addresses like 192.0.2.1 that computers use to connect to each other.
   Amazon Route 53 is fully compliant with IPv6 as well.
5. VPC (Virtual Private Cloud):Amazon Virtual Private Cloud (Amazon VPC) lets you provision a logically isolated section of the Amazon Web Services (AWS) cloud where you can launch AWS resources in a virtual network that you define.
     You have complete control over your virtual networking environment, including selection of your own IP address range, creation of subnets, and configuration of route tables and network gateways.  
     You can use both IPv4 and IPv6 in your VPC for secure and easy access to resources and applications.
6. EBS (Elastic Block Storage): Amazon Elastic Block Store (Amazon EBS) provides persistent block storage volumes for use with Amazon EC2 instances in the AWS Cloud. Each Amazon EBS volume is automatically replicated within its Availability Zone to protect you from component failure, offering high availability and durability. Amazon EBS volumes offer the consistent and low-latency performance needed to run your workloads.
7. CloudFront: Amazon CloudFront is a global content delivery network (CDN) service that accelerates delivery of your websites, APIs, video content or other web assets. It integrates with other Amazon Web Services products to give developers and businesses an easy way to accelerate content to end users with no minimum usage commitments. Here we are using CloudFront for high volume edge content caching purpose.
8. S3 (Simple storage service): S3 for backups for databases
9. EC2 (Elastic Cloud Compute): It provides you with complete control of your computing resources and lets you run on Amazonâ€™s proven computing environment. Amazon EC2 reduces the time required to obtain and boot new server instances to minutes, allowing you to quickly scale capacity, both up and down, as your computing requirements change.
10.ELB (Elastic Load Balancing): Elastic Load Balancing offers two types of load balancers that both feature high availability, automatic scaling, and robust security.


+++++++++++++++++++++++++++++++++++++++++++++++

AWS Services to be Used:  EC2, S3, EBS, MongoDB, AS, ELB, CloudWatch etc.  

1. OS level backup will be taken with the help of AWS AMI tools which will create image. The created image will be transfer to S3 bucket. After that, we can register image as an AMI. Once done, we will get AMI id and we can use this AMI to launch new instances. Further, We will also understand the architecture and API/Request flow of the application and Accordingly plan & design the AWS Infrastructure. Below are the steps to take image and launch instance using the AMI:

a. Setup Amazon environment variables, keys and cert's.
b. Setup EC2 AMI Tools from Amazon S3
c. Download EC2 AMI Tools:  wget http://s3.amazonaws.com/ec2-downloads/ec2-ami-tools.zip 
d. Install EC2 AMI Tools:  unzip -d /opt/ ec2-ami-tools.zip 
e. Bundle new AMI:   ec2-bundle-image
f. Upload AMI files to S3 bucket:  ec2-upload-bundle
g. Setup EC2 API Tools from Amazon S3
h. Download EC2 API Tools:  wget http://s3.amazonaws.com/ec2-downloads/ec2-api-tools.zip 
i. Install EC2 API Tools:   unzip -d /opt/ ec2-api-tools.zip 
J. Register AMI with API tools:  ec2-register
K. Run AMI instance:  ec2-run-instances ami
L. Describe AMI instance:  ec2-describe-instances

2. For Application deployment, we need to point to the same git branches which were being used earlier.

3. Once the Infrastructure is setup, for deployment we can create jobs in Jenkins.

4. Further, we can elastic load balancer to balance the load between the backend servers of different modules.

5. Also we can use auto scaling for launching a new instance once the CPU load on the server goes more than 80%. The newly launched instance will get registered behind the ELB and ELB will start  routing the traffic to the new instance to balance the load. For highly available application we can also launch the instances in different availability zone with cross zone load balancing enabled. In case of any issue in particular region, our application will be working from the different availability zone which is registered with ELB.

6. For monitoring the application, we can design and deploy custom cloudwatch plugins to monitor the system parameters like Disk Usage, Memory Utilization, Processes, TCP connections on the particular Port, CPU Utilization etc.

This is how we can achieve HA and Load Balancing for any application. 


+++++++++++++++++++++++++++++++++++++++



AWS SERVICES USED :
1) Amazon Elastic Beanstalk
2) Elastic Load Balancer
3) Auto Scaling
4) EC2 Instances
5) VPC , Security Groups, IAM Roles
6) Relational Database Service - Sql and No Sql
7) SQS
8) Route 53

To make this infra as HA we will use 2 AWS insantances for Apache Web Server and Apache tomcat.Load will be distributed at the Load balancer end.

Step1. Setup of the apache Webserver behind the Load Balancer.By using the Proxy/ProxyPass we will connect the apache server to the tomcat.

Step2. Setup of the two apache Tomcat instance EC2/Elastic Beanstalk  and sync the data from the existing infra.In case of Beanstalk we will provide the WAR file during Beanstalk Environment creation.

Step3. For Database  we will use RDS,during setup of RDS we will select the Oracle product.If the load is heavy on the website/App we will setup a read replica.We have to restore the database from the existing infra to the RDS.

Step4. For Messaging Queue we will AWS SQS(Simple Queue Service).

Step5. In case of autoscaling we will have to freeze an Image of the existing Webserver or tomcat server after that we will configure the Launch configurations.Now we will create the auto scaling policies based on the CPU load/Average requests.

Step6. In place of MongoDB we will use the DynamoDB.or we can create the MongoDB cluster on the EC2 instances.

Note: We will use IAM roles for the service authentications/connectivity.

After migration completed we will check the site/app by  host file entry,after the confirmation that everything working perfect we will change the DNS record.
